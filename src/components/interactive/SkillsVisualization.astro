---
import { skillsData } from '../../data/skills.js';

// Processing the data for D3
const categories = Object.keys(skillsData);
---

<div class="skills-visualization relative w-full h-[600px] bg-[var(--color-bg-primary)] rounded-lg overflow-hidden">
  <div class="absolute inset-0 transition-theme" id="skills-container"></div>
  
  <!-- Category tabs -->
  <div class="skills-tabs absolute top-4 left-0 right-0 flex justify-center gap-2 z-10 flex-wrap px-4">
    {categories.map((category) => (
      <button 
        class="skill-tab px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 bg-[var(--color-bg-secondary)] text-[var(--color-text-secondary)] hover:bg-[var(--color-accent)] hover:text-white data-[active=true]:bg-[var(--color-accent)] data-[active=true]:text-white"
        data-category={category}
        data-active={category === categories[0]}
      >
        <span class="mr-2">{skillsData[category].icon}</span>
        {skillsData[category].name}
      </button>
    ))}
  </div>
  
  <!-- Legend for skill level -->
  <div class="absolute bottom-4 left-4 bg-[var(--color-bg-secondary)] p-2 rounded-lg shadow-sm z-10">
    <div class="text-xs font-medium text-[var(--color-text-secondary)] mb-1">Skill Level</div>
    <div class="flex items-center gap-2">
      <span class="block w-3 h-3 rounded-full bg-red-300"></span>
      <span class="text-xs">Beginner</span>
      <span class="block w-3 h-3 rounded-full bg-yellow-300 ml-2"></span>
      <span class="text-xs">Intermediate</span>
      <span class="block w-3 h-3 rounded-full bg-green-300 ml-2"></span>
      <span class="text-xs">Advanced</span>
    </div>
  </div>
</div>

<script>
  import * as d3 from 'd3';
  import { skillsData } from '../../data/skills.js';
  
  document.addEventListener('DOMContentLoaded', () => {
    // Convert the skills data to a format suitable for D3
    const categories = Object.keys(skillsData);
    const firstCategory = categories[0];
    
    // Initialize visualization
    initializeVisualization(firstCategory);
    
    // Add event listeners to tabs
    document.querySelectorAll('.skill-tab').forEach(tab => {
      tab.addEventListener('click', () => {
        const category = tab.dataset.category;
        if (!category) return;
        
        // Update active state
        document.querySelectorAll('.skill-tab').forEach(t => t.setAttribute('data-active', 'false'));
        tab.setAttribute('data-active', 'true');
        
        // Clear and redraw visualization
        document.getElementById('skills-container').innerHTML = '';
        initializeVisualization(category);
      });
    });
  });
  
  function initializeVisualization(category) {
    const container = document.getElementById('skills-container');
    if (!container) return;
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    
    // Create SVG
    const svg = d3.select('#skills-container')
      .append('svg')
      .attr('width', width)
      .attr('height', height);
    
    // Prepare data
    const data = skillsData[category].skills.map(skill => ({
      ...skill,
      radius: 20 + (skill.level / 10), // Scale radius based on skill level
      color: getColorForLevel(skill.level)
    }));
    
    // Create force simulation
    const simulation = d3.forceSimulation(data)
      .force('charge', d3.forceManyBody().strength(100))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collision', d3.forceCollide().radius(d => d.radius + 10))
      .on('tick', ticked);
    
    // Create nodes
    const node = svg.append('g')
      .selectAll('g')
      .data(data)
      .enter()
      .append('g')
      .call(d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));
    
    // Add circles to nodes
    node.append('circle')
      .attr('r', d => d.radius)
      .attr('fill', d => d.color)
      .attr('stroke', 'var(--color-accent)')
      .attr('stroke-width', 2)
      .attr('stroke-opacity', 0.5);
    
    // Add text to nodes (skill name)
    node.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', '.3em')
      .text(d => d.name)
      .attr('fill', 'var(--color-text-primary)')
      .attr('font-size', d => Math.min(2 * d.radius / (d.name.length), 12))
      .style('pointer-events', 'none');
    
    // Add text for experience years
    node.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', '1.5em')
      .text(d => `${d.years} yr${d.years > 1 ? 's' : ''}`)
      .attr('fill', 'var(--color-text-secondary)')
      .attr('font-size', '10px')
      .style('pointer-events', 'none');
    
    // Ticked function to update positions
    function ticked() {
      node.attr('transform', d => `translate(${d.x},${d.y})`);
    }
    
    // Drag functions
    function dragstarted(event, d) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }
    
    function dragged(event, d) {
      d.fx = event.x;
      d.fy = event.y;
    }
    
    function dragended(event, d) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
    
    // Helper function to get color based on skill level
    function getColorForLevel(level) {
      if (level < 50) return '#F8D7DA'; // Beginner (light red)
      if (level < 80) return '#FFF3CD'; // Intermediate (light yellow)
      return '#D1E7DD'; // Advanced (light green)
    }
  }
</script>